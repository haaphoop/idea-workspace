第12章 通过异常处理错误
Java的基本理念是“结构不佳的代码不能运行”。
发现错误的理想时机是在编译阶段，也就是在你试图运行程序之前。然而，编译期间并不能找出所有的错误，余下的问题必须在运行期间解决。这就需要
错误源能通过某种方式，把适当的信息传递给某个接收者---该接收者将知道如何正确处理这个问题。
    改进的错误恢复机制是提供代码健壮性的最强有力的方式。错误恢复在我们所编写的每一个程序中都是基本的要素，但是在Java中它显得格外重要，
因为Java的主要目标之一就是创建供他人使用的程序构件。要想创建健壮的系统，它的每一个构件都必须是健壮的。Java使用异常来提供一致的错误报告
模型，使得构件能够与客户端代码可靠地沟通问题。
    Java中的异常处理的目的在于通过使用少于目前数量的代码来简化大型、可靠的程序的生成，并且通过这种方式可以使你更加自信：你的应用中没有未处理的
错误。异常的相关知识学起来并非艰涩难懂，并且它属于那种可以是你的项目收益明显、立竿见影的特性之一。
    因为异常处理是Java中唯一正式的错误报告机制，并且通过编译器强制执行，所以不学习异常处理的话，书中也就只能写出那么些例子了。本章将向读者介绍
如何编写正确的异常处理程序，并将展示当方法出问题的时候，如何产生自定义的异常。

12.1 概念

12.2 基本异常
    异常情形是指阻止当前方法或作用域继续执行的问题。把异常情形与普通问题相区分很重要，所谓的普通问题是指，在当前环境下能得到足够的信息，
总能处理这个错误。而对于异常情形，就不能继续下去了，因为在当前环境下无法获得必要的信息来解决问题。
    当异常抛出后，有几件事会随着发生。首先，同Java中其他对象的创建一样，将使用new在堆上创建异常对象。然后，当前的执行路径被终止，并且从当前
环境中弹出对异常对象的引用。此时，异常处理机制接管程序，并开始寻找一个恰当的地方来继续执行程序。这个恰当的地方就是异常处理程序，它的任务是将
程序从错误状态中恢复，以使程序能要么换一种方式云溪，要么继续运行下去。

12.2.1 异常参数
    与使用Java中的其他对象一样，我们总是用new在堆上创建异常对象，这也伴随着存储空间的分配和构造器的调用。所有标准异常类都有两个构造器：
一个是默认构造器；另一个是接受字符串作为参数，以便把相关信息放入异常对象构造器：
    throw new NUllPointerException("t = null");
不久读者就看到，要把这个字符串的内容提取出来可以有多种不同的方法。
    关键字throw将产生许多有趣的结果。在使用new创建了异常对象之后，此对象的引用将传给throw。尽管返回的异常对象其类型通常与方法设计的返回类型不同
，但从效果看，它就像是从方法“返回”的。可以简单地把异常处理看成一种不同的返回机制，淡然若过分强调这种类比的话，就会有麻烦了。另外还能用抛出异常的方式从
当前的作用域退出。在这两种情况下，将返回一个异常对象，然后退出方法或作用域。
    此外，能够抛出任意类型的Throwable对象，它是异常类型的根类。通常，对于不同类型的错误，要抛出相应的异常。错误信息可以保存在异常对象
内部或者用异常类的名称来按时。上一层环境通过这些信息来决定如何处理异常。

12.3 捕获异常
要明白异常是如何被捕获的，必须首先理解监控区域的概念。它是一段可能产生异常的代码，并且后面跟着处理这些异常的代码。

12.4.1 异常与记录日志
