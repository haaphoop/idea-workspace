21.2.1 定义任务
    线程可以驱动任务，因此需要一种描述任务的方式，可以由Runnable接口来提供。
要想定义任务，只需实现Runnable接口并编写run()方法，使得该任务可以执行命令：LiftOff.java

21.2.2 Thread类
    将Runnable对象转变为工作任务的传统方式是把它提交给Thread构造器：BasicThreads.java

21.2.3 使用Executor
    Java SE5的java.util.concurrent包中的执行器(Executor)将为你管理Thread对象，从而简化了并发编程。
Executor在客户端和任务执行之间提供了一个间接层；与客户端直接执行任务不同，这个中介对象将执行任务。Executor
允许你管理异步任务的执行，而无须显式地管理线程的生命周期。Executor在Java SE5/6中是启动任务的优选方法。
    可以使用Executor来替代在MoreBasicThreads.java中显示地创建Thread对象。LiftOff对象知道如何运行具体的任务，
与命令设计模式一样，它暴露了要执行的单一方法。ExecutorService知道如何构建恰当的上下文来执行Runnable对象。在下面的
示例中，CachedThreadPool将为每个人物都创建一个线程。注意，ExecutorService对象是使用静态的Executor方法创建的，这个方法
可以确定其Executor类型：CachedThreadPool.java

21.2.4 从任务中产生返回值
Runnable是执行工作的独立任务，但是它不返回任何值。如果你希望任务在完成时能够返回一个值，那么可以实现Callable接口而不是Runnable
接口。在JavaSE5中引入的Callable是一种具有类型参数的泛型，它的类型参数表示的是从方法call()
中返回的值，并且必须使用ExecutorService.submit()方法调用它，下面是一个简单示例：TaskWithResult.java