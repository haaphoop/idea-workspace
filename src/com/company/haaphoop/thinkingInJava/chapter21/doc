21.2.1 定义任务
    线程可以驱动任务，因此需要一种描述任务的方式，可以由Runnable接口来提供。
要想定义任务，只需实现Runnable接口并编写run()方法，使得该任务可以执行命令：LiftOff.java

21.2.2 Thread类
    将Runnable对象转变为工作任务的传统方式是把它提交给Thread构造器：BasicThreads.java

21.2.3 使用Executor
    Java SE5的java.util.concurrent包中的执行器(Executor)将为你管理Thread对象，从而简化了并发编程。
Executor在客户端和任务执行之间提供了一个间接层；与客户端直接执行任务不同，这个中介对象将执行任务。Executor
允许你管理异步任务的执行，而无须显式地管理线程的生命周期。Executor在Java SE5/6中是启动任务的优选方法。
    可以使用Executor来替代在MoreBasicThreads.java中显示地创建Thread对象。LiftOff对象知道如何运行具体的任务，
与命令设计模式一样，它暴露了要执行的单一方法。ExecutorService知道如何构建恰当的上下文来执行Runnable对象。在下面的
示例中，CachedThreadPool将为每个人物都创建一个线程。注意，ExecutorService对象是使用静态的Executor方法创建的，这个方法
可以确定其Executor类型：CachedThreadPool.java

21.2.4 从任务中产生返回值
Runnable是执行工作的独立任务，但是它不返回任何值。如果你希望任务在完成时能够返回一个值，那么可以实现Callable接口而不是Runnable
接口。在JavaSE5中引入的Callable是一种具有类型参数的泛型，它的类型参数表示的是从方法call()
中返回的值，并且必须使用ExecutorService.submit()方法调用它，下面是一个简单示例：TaskWithResult.java

21.2.5 休眠
    影响任务行为的一种简单方法是调用sleep()，这将使任务中止执行给定的时间。在LiftOff类中，要是把对yield()的调用换成
是调用sleep()，将得到如下结果：SleepingTask.java

21.2.6 优先级
    线程的优先级将该线程的重要性传递给了调度器。尽管CPU处理现有线程集的顺序是不确定的，但是调度器将倾向于让优先权最高的线程先
执行。然而，这并不是意味着优先权较低的线程将得不到执行（就是说，优先权不会导致死锁）。优先级较低的线程仅仅是执行的频率较低。
    在绝大多数时间里，所有线程都应该以默认的优先级运行。试图操纵线程优先级通常是一种错误。下面是一个演示优先级等级的示例，可以用
getPriority()来读取现有线程的优先级，并且在任何时刻都可以通过setPriority()来修改它。SimplePriorities.java

21.2.7 让步
    如果知道已经完成了在run()方法的循环的一次迭代过程中所需的工作，就可以给线程调度机制一个暗示：你的工作已经做的差不多了，可以让别的
线程使用CPU了。这个暗示将通过调用yield()方法来作出（不过这只是一个暗示，没有任何机制保证它将会被采纳）。当调用yield()时，也是在建议具有
相同优先级的其他线程可以运行。

21.2.8 后台线程
    所谓后台(daemon)线程，是指在程序运行的时候在后台提供一种通用服务的线程，并且这种线程并不属于程序中不可或缺的部分。因此，当所有的
的非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。比如，执行main()
的就是一个非后台线程。 SimpleDaemons.java SimpleDaemons
.java创建了显式的线程，以便可以设置它们的后台标志。通过编写定制的ThreadFactory可以定制由Executor
创建的线程的属性（后台、优先级、名称）: