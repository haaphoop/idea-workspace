第18章 Java I/O系统
18.1.1 目录列表器
    示例：注意，通过使用java.util.Arrays.sort()和String.CASE_INSENSITIVE
    .ORDERComparator可以很容易地对结果进行排序（按字母顺序）。DirList.java

18.1.2 目录实用工具
    程序设计中一项常见的任务就是在文件集上执行操作，这些文件要么在本地目录中，
要么遍布于整个目录树中。如果有一种工具能够为你产生这个文件集，那么它会非常有用。
下面的实用工具类就可以通过使用local()方法产生由本地目录中的文件构成的File对象数组，或者通过
使用walk()方法产生给定目录下的由整个目录树中所有文件构成的List<File>。这些文件是基于你提供的正则表达式而被选中的：
Directory.java

18.1.3 目录的检查及创建
    File类不仅仅只代表存在的文件或目录。也可以用File对象来创建新的目录或尚不存在的整个目录路径。我们还可以
查看文件的特性（大小、最后修改日期、读/写），检查某个File对象代表的是一个文件还是一个目录，并可以删除文件。
MakeDirectories.java

18.2 输入和输出
    编程语言的I/O类库中常使用流这个概念，它代表任何有能力产出数据的数据源对象或者是有能力接收数据的接收端对象。
“流”屏蔽了实际的I/O设备中处理数据的细节。
    Java类库中的I/O类分成输入和输出两部分，可以在JDK文档里的类层次结构中查看到。通过继承，任何自Inputstream或Reader
派生而来的类都含有名为read()的基本方法，用于读取单个字节或者字节数组。同样，任何自OutputStream或Writer派生而来的类都含有名为
writer()的基本方法，用于写单个字节或者字节数组。但是，我们通常不会用到这些方法，它们之所以存在是因为别的类可以使用它们，以便
提供更有用的接口。因此，我们很少使用单一的类来创建流对象，而是通过叠合多个对象来提供所期望的功能（这是装饰器设计模式）。实际上，Java
中"流"类库让人迷惑的主要原因就在于：创建单一的结果流，却需要创建多个对象。
    有必要按照这些类的功能对它们进行分类。在Java 1.0中，类库的设计者首先限定与输入有关的所有类都应该从InputStream继承，而与输出有关的
所有类都应该从OutputStream继承。

18.2.1 InputStream类型
    InputStream的作用是用来表示那些从不同数据源产生输入的类。如表18-1所示，这些数据源包括：
    （1）字节数组 ByteArrayInputStream
    （2）String对象 StringBufferInputStream
    （3）文件  FileInputStream
    （4）“管道”，工作方式与实际管道相似，即，从一端输入，从另一端输出。  PipedInputStream
    （5）一个由其他种类的流组成的序列，以便我们可以将它们收集合并到一个流内。 FilterInputStream
    （6）其他数据源，如Internet连接等
每种数据源都有相应的InputStream子类。另外，FilterInputStream也属于一种InputStream
，为装饰器类提供基类，其中，装饰器类可以把属性或有用的接口与输入流连接在一起。

18.2.2 OutputStream类型
    该类别的类决定了输出所要去往的目标：字节数组（但不是String，不过你当然可以用字节数组自己创建）、文件或管道。
    另外，FilterOutputStream为装饰器类提供了一个基类，装饰器类把属性或者有用的接口与输出流连接了起来。

18.3 添加属性和有用的接口
    装饰器在第15章引入。Java I/O 类库需要多种不同功能的组合，这正是使用装饰器模式的理由所在。这也是Java I/O类库里存在filter
(过滤器)类的原因所在抽象类filter是所有装饰器类的基类。装饰器必须具有和它所装饰的对象相同的接口，但它也可以扩展接口，而这种情况只发生在个别
filter类中。
    但是，装饰器模式也有一个缺点：在编写程序时，它给我们提供了相当多的灵活性，但是它同时也增加了代码的复杂性。Java I/O类库操作不变的原因在于：
我们必须创建许多类----“核心”I/O类型加上所有的装饰器，才能得到我们所希望的单个I/O对象。
    FilterInputStream和FilterOutputStream是用来提供装饰器类接口以控制特定输入流(InputStream)和输出流
(OutputStream)的两个类，它们的名字并不是很直观。FilterInputStream和FilterOutputStream分别自I/O
类库中的基类InputStream和OutputStream派生而来，这两个类是装饰器的必要条件。

18.3.1 通过FilterInputStream从InputStream读取数据
    FilterInputStream类能够完成两件完全不同的事情。其中，DataInputStream允许我们读取不同的基本类型数据以及String
对象（所有方法都以"read"开头，例如readByte()、readFloat()
等等）。搭配相应的DataOutputStream，我们就可以通过数据流将基本类型的数据从一个地方迁移到另一个地方。具体是哪些地方由表18-1中那些类决定。
    其他FilterInputStreame类则在内部修改InputStream
    的行为方式：是否缓冲，是否保留它所读过的行，以及是否把单一字符推回输入流等等。最后两个类看起来更像是为了创建一个编辑器。

18.6 I/O流的典型使用方式
    尽管可以通过不同的方式组合I/O流类，但也就只用到其中的几种组合。下面的例子可以作为典型的I/O用法的基本参考。
18.6.1 缓冲输入文件
    如果想要打开一个文件用于字符输入，可以使用以String或File对象作为文件名的FileInputReader
。为了提高速度，我们希望对那个文件进行缓冲，那么我们将所产生的引用传给一个BufferedReader构造器。由于BufferedReader
也提供readLine()方法，所以这是我们的最终对象和进行读取的接口。当readLine()将返回null时，你就达到了文件的末尾。
BufferedInputFile.java
18.6.2 从内存输入
    下面的示例中，从BufferedInputFile.read()读入的String结果被用来创建一个StringReader。然后调用read()
每次读取一个字符，并把它发送到控制台。MemoryInput.java

18.6.3 格式化的内存输入
    要读取格式化数据，可以使用DataInputStream，它是一个面向字节的I/O类。因此我们必须使用InputStream类而不是Reader
类。当然，我们可以用InputStream以字节的形式读取任何数据，不过，在这里使用的是字符串。FormattedMemoryInput.java
    如果我们从DataInputStream用readByte()一次一个字节地读取字符，那么任何字节的值都是合法的结果，因此返回值不能用来
检测输入是否结束。相反，我们可以使用available()方法查看还有多少可供存取的字符。下面这个例子演示了怎样一次一个字节地读取文件：TestEOF.java

18.6.4 基本的文件输出
    FileWriter对象可以向文件写入数据。首先，创建一个与指定文件连接的FileWriter。实际上，我们通常会用BufferedWriter
将其包装起来用以缓冲输出（尝试移除此包装来感受对性能的影响---缓冲往往能显著地增加I/O操作的性能）。在本例中，为了提供格式化机制，它被装饰
成了PrintWriter。按照这种方式创建的数据文件可作为普通文本文件读取。BasicFileOutput.java
    文本文件输出的快捷方式
    Java SE5在PrintWriter
    中添加了一个辅助构造器，使得你不必在每次希望创建文本文件并向其中写入时，都去执行所有的装饰工作。下面是用这种快捷方式重写的BasicFileOutput
    .java

18.6.5 存储和恢复数据
    PrintWriter可以对数据进行格式化，以便人们的阅读。但是为了输出可供另一个"流"恢复的数据，我们需要用DataOutputStream
写入数据，并用DataInputStream
恢复数据。当然，这些流可以是任何形式，但在下面的示例中使用的是一个文件，并且对于读和写都进行了缓冲处理。注意DataOutputStream
和DataInputStream是面向字节的，因此要使用InputStream和OutputStream。StoringAndRecoveringData
.java

18.6.6 读写随机访问文件
    使用RandomAccessFile，类似于组合使用了DataInputStream和DataOutputStream
    （因为它实现了相同的接口：DataInput和DataOutput）。另外我们可以看到，利用seek()可以在文件中到处移动，并修改文件中的某个值。
     在使用RandomAccessFile时，你必须知道文件排版，这样才能正确地操作它。RandomAccessFile拥有读取基本类型个UTF-8
     字符串的各种具体方法。下面是示例：UsingRandomAccessFile.java

 18.6.7 管道流
    PipedInputStream、PipedOutputStream、PipedReader及PipedWriter
    在本章只是简单地提到。但这并不表明它们没有什么用处，它们的价值只有在我们开始理解多线程之后才会显现，因为管道流用于任务之间的通信。

18.7 文件读写的实用工具
    一个很常见的程序化任务就是读取文件到内存，修改，然后再写出。Java I/O类库的问题之一就是：它需要编写相当多的代码去执行这些常用操作--没有任何
基本的帮助功能可以为我们做这一切。更糟糕的是，装饰器会使得要记住如何打开文件变成一件相当困难的事。因此，在我们的类库中添加帮助就显得相当有意义，
这样就可以很容易地为我们完成这些基本任务。Java
SE5在PrintWriter
中添加了方便的构造器，因此你可以很方便地打开一个文本文件进行写入操作。但是，还有许多其他的常见操作是你需要反复执行的，这就使得消除与
这些任务相关联的重复代码就显得很有意义了。
    下面的TextFile类在本书前面的示例中就已经被用来简化对文件的读写操作了。它包含的static
    方法可以像简单字符串那样读写文本文件，并且我们可以创建一个TextFile对象，它用一个ArrayList
    来保存文件的若干行（如此，当我们操纵文件内容时，就可以实用ArrayList的所有功能）。TextFile.java

18.7.1 读取二进制文件

18.8 标准I/O
    标准I/O这个术语参考的是Unix
    中“程序所使用的单一信息流”这个概念。程序的所有输入都可以来自于标准输入，它的所有输出也都可以发送到标准输出，以及所有的
错误信息都可以发送到标准错误。标准I/O的意义在于：我们可以很容易地把程序串联起来，一个程序的标准输出可以成为另一程序的标准输入。这真是一个强大的工具。

18.8.1 从标准输入中读取
    按照标准I/O模型，Java提供了System.in、System.out和System.err。在整本书里我们已经看到了怎样用System
    .out将数据写出到标准输出，其中System.out已经事先被包装成了printStream对象。System
    .err同样也是PrintStream，但System
    .in却是一个没有被包装过的未经加工的InputStream。这意味尽管我们可以立即使用System.out和System
    .err，但是在读取System.in之前必须对其进行包装。
    通常我们会用readLine()一次一行地读取输入，为此，我们将System
    .in包装成BufferedReader来使用这要求我们必须用InputStreamReader把System.in转换成Reader。Echo
    .java

18.8.2 将System.out转换成PrintStream
    System.out是一个PrintStream，而PrintStream是一个OutputStream。PrintWriter
    有一个可以接受OutputStream作为参数的构造器。因此，只要需要，就可以使用那个构造器把System
    .out转换成PrintWriter：ChangeSystemOut.java

18.8.3 标准I/O重定向
    Java的System类提供了一些简单的静态方法调用，以允许我们对标准输入、输出和错误I/O流进行重定向：
        setIn(InputStream)
        setOut(PrintStream)
        setErr(PrintStream)
        如果我们突然开始在显示器上创建大量输出，而这些输出滚动得太快以至于无法阅读时，重定向输出就显得极为有用。对于我们想
        重复测试某个特定用户的输入序列的命令行程序来说，重定向输入就很有价值。下例简单演示了这些方法的使用：Redirecting.java

18.9 进程控制
    你经常会需要在Java内部执行其他操作系统的程序，并且要控制这些程序的输入和输出。Java类库提供了执行这些操作的类。
    一项常见的任务是运行程序，并将产生的输出发送到控制台。本节包含了一个可以简化这项任务的实用工具。在使用这个实用工具时，可能会产生
两种类型的错误：普通的导致异常的错误---对这些错误我们只需重新抛出一个运行时异常，以及从进程自身的执行过程中产生的错误，我们希望用单独的异常来报告这些错误：
OSExecuteException.java