第18章 Java I/O系统
    对程序语言的设计者来说，创建一个好的输入/输出（I/O）系统是一项艰难的任务。
    现有的大量不同方案已经说明了这一点。挑战似乎来自于要覆盖所有的可能性。不仅存在各种I/O源端和想要与之通信的接收端（文件、控制台、网络链接等），而且还需要以多种不同的方式与它们进行通信（顺序、随机存取、缓冲、二进制、按字符、按行、按字等）。
    Java类库的设计者通过创建大量的类来解决这个难题。一开始，可能会对Java I/O系统提供了如此多的类而感到不知所错。

18.1 File类
    使用类库工具，可以帮助我们处理文件目录问题。
    File（文件）类这个名字有一定的误导性；可能会认为它指代的是文件，实际上却并非如此。它既能代表一个特定文件的名称，又能代表一个目录下的一组文件的名称。如果它指的是一个文件集，我们就可以对此集合调用list()方法，这个方法会返回一个字符数组。我们很容易就可以理解返回的是一个数组而不是某个更具灵活性的类容器，因为元素的个数是固定的，所以如果我们想取得不同的目录列表，只需要再创建一个不同的File对象就可以了。实际上，FilePath(文件路径)对这个类来说是个更好的名字。

18.1.1 目录列表器
    假设我们想查看一个目录列表，可以用两种方法来使用File对象。如果我们调用不带参数的list()方法，便可以获得此File对象包含的全部列表。然而，如果我们想获得一个受限列表，例如，想得到所有扩展名为.java的文件，那么我们就要用到"目录过滤器"，这个类会告诉我们怎样显示符合条件的File对象。