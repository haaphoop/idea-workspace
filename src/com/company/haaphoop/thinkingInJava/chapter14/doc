第14章 类型信息
运行时类型信息使得你可以在程序运行时发现和使用类型信息。
它使你从只能在编译期执行面向类型的操作的禁锢中解脱了出来，并且可以使用某些非常强大的程序。对RTTI的需要，
揭示了面向对象设计中许多有趣的问题，同时也提出了如何组织程序的问题。
本章将讨论Java是如何让我们在运行时识别对象和类的信息的。主要有两种方式：一种是“传统的”RTTI，它假定我们在编译时
已经知道了所有的类型；另一种是“反射”机制，它允许我们在运行时发现和使用类的信息。

14.1 为什么需要RTTI
面向对象编程中基本目的是：让代码只操纵对基类的引用。

14.2 Class对象
Class对象就是用来创建类的所有的“常规”对象的。Java使用Class对象来执行其RTTI。Class类还拥有大量的使用RTTI的其他方式。
类是程序的一部分，每个类都有一个Class对象。换言之，每当编写并且编译了一个新类，就会产生一个Class对象。为了生成这个类的对象，运行这个程序的Java虚拟机将使用被称为类加载器的子系统。
类加载器子系统实际上可以包含一条类加载器链，但是只有一个原生类加载器，它是JVM实现的一部分。原生类加载器加载的是所谓的可信类，包括Java API类，它们通常是从本地盘加载的。在这条链中，通常不需要添加额外的类加载器。
所有的类都是在对其第一次使用时，动态加载到JVM中的。当程序创建第一个对类的静态成员的引用时，就会加载这个类。这个证明构造器也是类的静态方法，即使在构造器之前并没有使用static关键字。因此，使用new操作符创建类的新对象也会被当作对类的静态成员的引用。
因此，Java程序在它开始运行之前并非被完全加载，其各个部分实在必须时才加载的。类加载器首先检查这个类的Class对象是否已经加载。如果尚未加载，默认的类加载器就会根据类名查找.class文件。在这个类的字节码被加载时，它们会接受验证，以确保其没有被破坏，并且不包含不良Java代码。一旦某个类的Class对象被载入内存，它就被用来创建这个类的所有对象。

14.2.1 类字面常量
Java还提供了另一种方法来生成对Class对象的引用，即使用类字面常量。如：FancyToy.class;这样做不仅更简单，而且更安全，因为它在编译时就会受到检查（因此不需要置于try语句块中）。并且它根除了对forName()方法的调用，所以更高效。
类字面常量不仅可以应用于普通的类，也可以应用于接口、数组以及基本数据类型。另外，对于基本数据类型的包装器类，还有一个标准字段TYPE。TYPE字段时一个引用，指向对应的基本数据类型的Class对象
当使用".class"来创建对Class对象的应用时，不会自动地初始化该Class对象。为了使用类而做的准备工作实际包含三个步骤：
    1）加载，这是有类加载器执行的。该步骤将查找字节码（通常在classpath所指定的路径中查找，但这并非是必需的），并从这些字节码中创建一个Class对象。
    2）链接。在链接阶段将验证类中的字节码，为静态域分配存储空间，并且如果必需的话，将解析这个类创建的对其他类的所有引用。
    3）初始化。如果该类具有超类，则对其初始化，执行静态初始化器和静态初始化块。
初始化被延迟到了对静态方法（构造器隐式地是静态的）或者非常数静态域进行首次引用时才执行

14.2.2 泛化的Class引用
Class引用总是指向某个Class对象，它可以制造类的实例，并包含可作用域这些实例的所有方法代码。它还包含该类得静态成员，因此，Class引用表示得就是它所指向得对象得确切类型，而该对象便是Class类的一个对象。

14.2.3 新的转型语法
Java SE5添加了用于Class引用的转型语法，即cast()方法：

14.3 类型转换前先做检查
迄今为止，我们已经知道RTTI形式包括：
1）传统的类型转换，如"(Shape)",由RTTI确保类型转换的正确性，如果执行了一个错误的类型
转换，就会抛出一个ClassCastException异常。
2）代表对象的类型的Class对象。通过查询Class对象可以获取运行时所需的信息。
RTTI在Java中还有第三种形式，就是关键字instanceof。它返回一个布尔值，告诉我们对象是不是某个
特定类型的实例。可以用提问的方式使用它，就像这样：
if (x instanceof Dog) {
    ((Dog)x).bark();
}
在将x转型成一个Dog前，上面的if语句会检查对象x是否从属于Dog类。进行向下转型前，如果没有其他信息
可以告诉你这个对象是什么类型，那么使用instanceof是非常重要的，否则会得到一个ClassCastException异常。




