第13章 字符串
可以证明字符串操作是计算机程序设计中最常见的行为

13.1 不可变的String
String对象是不可变的。查看JDK文档就会发现，String类中每一个看起来会修改
String值的方法，实际上都是创建了一个全新的对象，以包含修改后的字符串内容
而最初的String对象则丝毫未动。

13.2 重载 “+” 与StringBuilder
String对象是不可变的，你可以给一个String对象加任意多的别名。因为String对象具有只读特性，所以指向它的任何引用都不可能改变
它的值，因此，也就不会对其他的引用有什么影响。
 不可变性会带来一定的效率问题。为String对象重载"+"操作符就是一个例子。重载的意思是，一个操作符在应用于特定的类时，被赋予了
特殊的意义（用于String的“+”与“+=”是Java中仅有的两个重载过的操作符，而Java并不允许程序员重载任何操作符）。

13.3 无意识的递归
Java中的每个类从根本上都是继承自Object，标准容器类自然也不例外。因此容器类都有toString()方法，并且覆盖了该方法，使得它生成的
String结果能够表达容器自身，以及容器所包含的对象。例如ArrayList.toString()，它会遍历ArrayList中包含的所有对象，调用每个元素上
的toString()方法；
如果你希望toString()方法打印出对象的内存地址，也许你会考虑使用this关键字

13.4 String上的操作
当改变字符串的内容时，String类的方法都会返回一个新的String对象。同时，如果内容没有发生改变，String的方法只是返回指向原对象的引用而已，
这可以节约存储空间以及避免额外的开销。

13.5 格式化输出
在长久的等待之后，Java SE5终于推出了C语言中pringf()风格的格式化输出这一功能。这不仅使得控制输出的代码更加简单，同时也给与Java开发者对于
输出格式与排列更强大的控制能力。

13.5.1 printf()

13.5.2 System.out.format()
Java SE5引入的format方法可用于PrintStream或PrintWriter对象，其中也包括System.out对象。format()方法模仿自C的printf()。

13.5.3 Formatter类
在Java中，所有新的格式化功能都由java.util.Formatter类处理。可以将Formatter看做一个翻译器，它将你的格式化字符串与数据翻译成需要的结果。
当你创建一个Formatter对象的时候，需要向其构造器传递一些信息，告诉它最终的结果将向哪里输出：
