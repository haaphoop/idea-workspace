第15章 泛型
一般的类和方法，只能使用具体的类型：要么是基本类型，要么是自定义的类。如果要编写可以应用与多种类型的代码，这种刻板的限制对代码的束缚就会很大。

java泛型的核心概念：告诉编译器想使用什么类型，然后编译器帮你处理一起细节。

15.2.1 一个元祖类库
    仅一次方法调用就能返回多个对象，你应该经常需要这样的功能吧。可是return
语句只允许返回单个对象，因此，解决办法就是创建一个对象，用他来持有想要返回的多个对象。当然，可以在每次需要的时候，专门创建一个类来完成这样的工作。可是有了泛型，我们
就能够一次性地解决该问题，以后再也不用在这个问题上浪费时间了。同时，我们在编译器就能够确保类型安全。
    这个概念称为元祖，它是将一组对象直接打包存储于其中的一个单一对象。这个容器对象允许读取其中元素，但是不允许向其中存放新的对象。
    通常，元祖可以具有任意长度，同时，元祖中的对象可以是任意不同的类型。

15.2.2 一个堆栈类

15.2.3 RandomList
    作为容器的另一个例子，假设我们需要一个持有特定类型对象的列表，每次调用其上的select()
    方法时，它可以随机地选取一个元素。如果我们希望以此构建一个可以应用于各种类型的对象的工具时，就需要使用泛型：

15.3 泛型接口

通过继承创建适配器：