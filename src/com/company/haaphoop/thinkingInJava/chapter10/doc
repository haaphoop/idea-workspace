内部类：可以将一个类的定义放在另一个类的定义内部
内部类是一种非常有用的特性，因为它允许你把一些逻辑相关的类组织在一起，并控制位于内部的类的可见性。然而必须要了解
到内部类与组合是完全不同的概念，这一点很重要。

10.1 创建内部类
创建内部类的方式就如同你想的一样，把类的定义置于外围类的里面。更典型的情况是外部类将有一个方法，该方法返回一个
指向内部类的引用，就像在to()和contents()方法中看到的那样。如果想从外部类的非静态方法之外的任意位置创建某个内部
类的对象，那么必须像在main()方法中那样，具体地指明这个对象的类型：OuterClassName.InnerClassName。

10.2 链接到外部类
当生成一个内部类的对象时，此对象与制造它的外围对象之间就有了一种联系，所以它能访问外围对象的所有成员，而不需要
任何特殊条件。此外，内部类还拥有其外围类的所有元素的访问权。内部类自动拥有对其外围类所有成员的访问权。当某个外围类的对象创建了
一个内部类对象时，此内部类对象必定会秘密地捕获一个指向那个外围类对象的引用。然后，在你访问此外围类的成员时，就是用那个引用
来选择外围类的成员。

10.3 使用.this与.new
如果需要生成对外部类对象的引用，可以使用外部类的名字后面紧跟圆点和this。这样产生的引用自动地具有正确的类型，这一点在编译期
就被知晓并受到检查，因此没有任何运行时开销。
有时你可能想要告知某些其他对象，去创建其某个内部类的对象。要实现此目的，你必须在new 表达式中提供对其他外部类对象的引用，这
是需要使用.new语法。

10.4 内部类与向上转型
当将内部类向上转型为其基类，尤其是转型为一个接口的时候，内部类就有了用武之地。（从实现了某个接口的对象，得到对此接口的引用，与向上
转型为这个对象的基类，实质上效果是一样的。）这是因为此内部类----某个接口的实现----能够完全不可见，并且不可用。所得到的只是指向基类
或接口的引用，所以能够很方便地隐藏实现细节。

10.5 在方法和作用域内的内部类
到目前为止，所看到的只是内部类的典型用途。通常，如果所读/写的代码包含了内部类，那么它们都是平凡的内部类，简单并且容易理解，然而，内部类的
语法覆盖了大量其他的更加难以理解的技术。例如，可以在一个方法里面或者在任何作用域内定义内部类。这么做有两个理由：
1）如前所示，你实现了某类型的接口，于是可以创建并返回对其的引用。
2）你要解决一个复杂的问题，想创建一个类来辅助你的解决方案，但是又不希望这个类是公共可用的。
下面代码中，来实现：
1）一个定义在方法中的类
2）一个定义在作用域内的类，此作用域在方法的内部
3）一个实现了接口的匿名类
4）一个匿名类，它扩展了有非默认构造器的类
5）一个匿名类，它执行字段初始化
6）一个匿名类，它通过实例初始化实现构造（匿名类不可能有构造器）

10.6 匿名内部类
在匿名内部类末尾得分号，并不是用来标记此内部类结束得。实际上，它标记得是表达式得结束，只不过这个表达式正巧包含了匿名内部类罢了。因此，这与别的
地方使用分号是一致得。

10.6.1 再访工厂方法

10.7 嵌套类
如果不需要内部类对象与其外围类对象之间有联系，那么可以将内部类声明为static。这通常称为嵌套类。想要理解static应用于内部类时得含义，就必须记住，普通内部类对象隐式地保存了一个引用，指向创建它得外围类对象。然而，当内部类是static得时，就不是这样了。嵌套类意味着：
1）要创建嵌套类的对象，并不需要其外围类的对象
2）不能从嵌套类的对象中访问非静态的外围类对象
嵌套类与普通类还有一个区别。普通内部类的字段与方法，只能放在类的外部层次上，所以普通的内部类不能有static数据和static字段，也不能包含嵌套类。但是
嵌套类可以包含所有这些东西。

10.7.1 接口内部的类
正常情况下，不能在接口内部放置任何代码，但嵌套类可以作为接口的一部分。你放到接口中的任何类都自动地是public和static的。因为类是static的，只是将
嵌套类置于接口的命名空间内，这并不违反接口的原则。你甚至可以在接口内部类中实现其外围接口。如果想要创建某些公共代码，使得它们可以被某个接口的所有不同实现所公用，那么使用接口内嵌类会显得很方便。

10.7.2 从多层嵌套类中访问外部类的成员
一个内部类被嵌套多少层并不重要-----它能透明地访问所有它所嵌入的外围类的所有成员，如下所示：

10.8 为什么需要内部类
至此，我们已经看到了许多描述内部类的语法与语义，但是这并不能回答“为什么需要内部类”这个问题。那么，Sun公司为什么会如此费心地增加这项基本的语言特性呢？一般来说，内部类继承自某个类或实现某个接口，内部类的代码操作创建它的外围类的对象。所以可以认为内部类提供了某种进入其外围类的窗口。内部类唯一要回答的是，如果只是需要一个对接口的引用，为什么不通过外围类实现那个接口呢？答案是：“如果这能满足需求，那么就应该这样做。”
