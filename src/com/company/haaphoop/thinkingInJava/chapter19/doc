第19章 枚举类型
    关键字enum可以将一组具名的值的有限集合创建为一种新的类型，而这些具名的值可以作为常规的程序组件使用。这是一种非常有用的功能。
    使用enum可以做很多有趣的事情，同时，我们也会深入其他的Java特性，例如泛型和反射。

19.1 基本enum特性
    调用enum的values()方法，可以遍历enum实例。values()方法返回enum实例的数组，而且
该数组中的元素严格保持其在enum中声明时的顺序，因此你可以在循环中使用values()返回的数组。
    创建enum时，编译器会为你生成一个相关的类，这个类继承自java.lang.Enum。下面的例子演示了Enum提供
的一些功能。 EnumClass.java

19.1.1 将静态导入用于enum
    Spiciness.java

19.2 向enum中添加新方法
    除了不能继承自一个enum之外，我们基本上可以将enum看作一个常规的类。也就是说，我们可以向enum中添加方法。enum甚至可以有main()方法。
    一般来说，我们希望每个枚举实例能够返回对自身的描述，而不仅仅只是默认的toString()
实现，这只能返回枚举实例的名字。为此，你可以提供一个构造器，专门负责处理这个额外的信息，然后添加一个方法，返回这个描述信息。示例：OzWitch.java

19.2.1 覆盖enum的方法
    覆盖toString()方法，给我们提供了另一种方式来为枚举实例生成不同的字符串描述信息。在下面的示例中，我们使用的就是实例的名字，不过我们希望改变其
格式。覆盖enum的toString()方法与覆盖一般类的方法没有区别：SpaceShip.java

19.3 switch语句中的enum
    在switch中使用enum，是enum提供的一项非常便利的功能。一般来说，在switch中只能使用整数值，而枚举实例天生就具备整数值的次序，并且可以
通过ordinal()方法取得其次序，因此我们可以在switch语句中使用enum。
    虽然一般情况下我们必须使用enum类型来修饰一个enum实例，但是在case语句中却不必如此。下面的例子使用enum
    构造了一个小型状态机：TrafficLight.java

19.4 values()的神秘之处
    编译器为你创建的enum类都继承自Enum类。然而，如果你研究一下Enum类就会发现，它并没有values()
    方法。可明明已经用过该方法了，难道存在某种隐藏的方法吗？我们可以利用反射机制编写一个简单的程序：Reflection.java

19.5 实现，而非继承
    所有的enum都继承自java.lang.Enum类。由于Java不支持多重继承，所以enum不能再继承其他类。然而，在创建新的enum时，
可以同时实现一个或多个接口：EnumImplementation.java

19.6 随机选取
    利用泛型：Enums.java

19.7 使用接口组织枚举
    无法从enum继承子类有时令人沮丧。这种需求有时源自我们希望扩展原enum中的元素，有时是因为我们希望使用子类将一个enum
中的元素进行分组。
    在一个接口的内部，创建实现该接口的枚举，以此将元素进行分组，可以达到将枚举元素分类组织的目的。举例来说，假设你想用
enum来表示不同类型的食物，同时还希望每个enum元素仍然保持Food类型。那可以这样实现：Food.java

19.8 使用EnumSet替代标志
    Set是一种集合，只能向其中添加不重复的对象。当然，enum也要求其成员都是唯一的，所以enum看起来也具有集合的行为。不过，由于
不能从enum中删除或添加元素，所以它只能算是不太有用的集合。Java SE5引入EnumSet，是为了通过enum创建一种替代品，以替代传统的
基于int的"位标志"。这种标志可以用来表示某种"开/关"信息，不过，使用这种标志，我们最终操作的只是一些bit，而不是这些bit想要表达的概念，
因此很容易写出令人难以理解的代码。EnumSet的设计充分考虑到了速度因素，因为它必须与非常高效的bit标志相竞争（其操作与HashSet相比，非常地快）。
就其内部而言，它就是将一个long值作为比特向量，所以EnumSet非常快速高效。使用EnumSet的有点是，它在说明一个二进制位是否存在时，具有更好
的表达能力，并且无需担心性能。
    EnumSet中的元素必须来自一个enum。下面的enum表示在一座大楼中，警报器的安放位置：EnumSets.java