序列化ID的问题
静态变量序列化
父类的序列化与Transient关键字
对敏感字段加密
序列化存储规则

序列化ID问题
情景：两个客户端A和B试图通过网络传递对象数据，A端将对象C序列化位二进制数据再传给B，B反序列化得到C。
问题：C对象的全路径假设位com.inout.Test，再A和B端都有这么一个类文件，功能代码完全一致。也都实现了Serializable接口，但是反序列化总是提示不成功。

解决：虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点时两个类的序列化ID是否一致（private static final long serialVersionUID = 1L）。即使两个类的功能代码完全一致，但是序列化ID不同，他们无法相互序列化和反序列化。
    简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传过来的字节流中的serialVersionUID与本地相应实体的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现版本不一致的异常。
    当实现java.io.Serializable接口的实体没有显式地定义一个名为serialVersionUID，类型为long的变量时，Java序列化机制会根据编译的class自动生成一个serialVersionUID作序列化版本比较用，这种情况下，只有同一次编译生成的class才会生成相同的serialVersionUID。

静态变量序列化
在序列化时并不保存静态变量，序列化保存的是对象的状态，静态变量属于类的状态，因此，序列化并不保存静态变量。

父类的序列化与Transient关键字
情景：一个子类实现了Serializable接口，它的父类都没有实现Serializable接口，序列化该子类对象，然后反序列化后输出父类定义的某变量的数值，该变量数值与序列化时的数值不同。

解决：要想将父类对象也序列化，就需要让父类也实现Serializable接口。如果父类不实现的话，就需要有默认的无参的构造函数。在父类没有实现Serializable接口时，虚拟机是不会序列化父对象的，而一个Java对象的构造必须先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此，当我们取父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如int 型的默认是0。

transient关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient变量的值被设为初始值，如int型为0.

特性使用案例
transient关键字使的字段不被序列化，未实现Serializable接口的父类的字段也可以不被序列化。

对敏感字段加密
情景：服务器端给客户端发送序列化对象数据，对象中有一些数据使敏感的，比如密码字符串等，希望对该密码字段在序列化时，进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时，才可以对密码进行读取，这样可以一定成都保证序列化对象的数据安全。

解决：在序列化过程中，虚拟机会视图调用对象类里的writeObject和readObject方法，进行用户自定义的序列化和反序列化，如果没有这样的方法，则默认调用时ObjectOutputStream的defaultWriteObject方法以及ObjectInputStream的defaultReadObject方法。用户自定义的writeObject和readObject方法可以允许用户控制序列化的过程，比如可以在序列化的过程中动态改变序列化的数值。基于这个原理，可以在实际应用中得到使用，用于敏感字段的加密工作。

特性使用案例：
RMI技术是完全基于Java序列化技术的，服务端接口调用所需要的参数对象来至于客户端，他们通过网络相互传输。这就涉及RMI的安全传输问题。一些敏感的字段，如用户名密码，我们希望对其进行加密，这时，就可以使用上述方法在客户端对密码进行加密，服务器端解密，确保数据传输的安全性。

序列化存储规则
对同一对象两次写入文件，打印出写入一次对象后的存储大小和写入两次后的存储大小，然后从文件中反序列化出两个对象，比较两个对象是否为同一对象。一般的思维是，两次写入对象，文件大小会变为两倍的大小，反序列化时，由于从文件读取，生成了两个对象，判断相等时应该输出false才对，但是最后输出结果为true。
可以看到，第二次写入对象时文件只增加了5字节，并且两个对象是相等的，这是为什么呢？
解答：Java序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，上面增加的5字节的存储空间就是新增引用和一些控制信息的空间。反序列化时，恢复引用关系。

