1 什么是序列化和反序列化
Serialization是一种将对象转化为字节流的过程；deserialization是将字节流恢复为对象的过程。
2 什么情况下需要序列化
 a)当你想把内存中的对象保存到一个文件中或者数据库中时候；
 b)当你想用套接字再网络上传送对象的时候；
 c)当你想通过RMI传输对象的时候；
3 如何实现序列化
将需要序列化的类实现Serializable接口就可以了，Serializable接口和Cloneable接口一样，不包含任何方法，是个标记接口。
4 代码分析 ---> Solution.java

5 序列化前和序列化后的对象的关系
反序列化还原后的对象地址与原来的地址不同，序列化前后对象的地址不同了，但是内容是一样的，而且对象中包含的引用也相同。换句话说，通古狗序列化操作，我们可以实现对任何可Serializable对象的“深度复制”----这意味着我们复制的是整个对象网，而不仅仅是基本对象及其引用。对于同一流的对象，它们的地址是相同，说明它们是同一个对象，但是与其他流的对象地址却不相同。也就是说，只要将对象序列化到单一流中，就可以恢复出与我们写出时一样的对象网，而且只要在同一流中，对象都是同一个。

java.io.File类用于表示文件（目录）
File类只用于表示文件的信息，不能用于文件内容的访问
RandomAccessFile.java提供的对文件内容的访问，既可以读文件，也可以写文件。
RandomAccessFile支持随机访问文件，可以访问文件的任意位置。
    (1)java文件模型
        在硬盘上的文件是byte byte byte（字节）存储的，是数据的集合，一个byte是8个bit，对于int就是int的后8位，对于字符(char),一个char可以理解位一个byte，但是char有ASCII编码，byte没有。
    (2)打开文件
        有两种模式“rw”（读写） “r”（只读）
        RandomAccessFile raf = new RandomAccessFile(file, "rw")
        文件指针，打开文件时指针在开头pointer = 0;
    (3)写方法
        raf.write(int) --->只写一个字节(后8位)，同时指针指向下一个位置，准备再次写入。
    (4) 读方法
        int b = raf.read() --->读一个字节
    (5) 文件读写完成以后一定要关闭
序列化与基本类型序列化
    (1)将类型int转换成4byte或将其他数据类型转换成byte的过程叫序列化
        数据--->n byte
    (2)反序列化
        将n个byte转换成一个数据的过程
        n byte --> 数据
    (3)RandomAccessFile提供基本类型的读写方法，可以将基本类型数据序列化到文件或者将文件内容反序列化为数据
IO流(输入流、输出流)
字节流、字符流
1 字节流
    (1)InputStream、OutputStream
        InputStream抽象了应用程序读取数据的方式
        OutputStream抽象了应用程序写出数据的方式
    (2)EOF = End 读到-1就读到结尾
    (3)输入流基本方式
        int b = in.read();读取一个字节无符号填充到int低8位。-1是EOF
        in.read(byte[] buf)
        in.read(byte[],int start, int size)
    (4)输出流基本方式
        out.write(int b) 写出一个byte到流，b的低8位
        out.write(byte[] buf)将bug字节数组都写入到流
        out.write(byte[] buf, int start, int size)
    (5)FileInputStream -->具体实现了在文件上读取数据
    (6)FileOutputStream -->实现了向文件中写出byte数据的方法
    (7)DataOutputStream/DataInputStream 对流功能的扩展，可以更加方便的读取int,long,字符的类型数据 DataOutputStream.writeInt()/writeDouble()/writeUTF()
    (8)BufferedInputStream/BufferedOutputStream
        这两个流类位于IO提供了带缓冲区的操作，一般打开文件进行写入或读取操作时，都会加上缓冲，这种流模式提高了IO的性能。从应用程序中把输入放入文件，相当于将一缸水倒入另一个缸中。
        FileOutputStream--->write()方法相当于一滴一滴地把水“转移”过去
        DataOutputStream-->writeXxx()方法会方便一些，相当于一瓢一瓢把水“转移”过去
        BufferedOutputStream--->write方法更方便，相当于一飘一瓢先放入桶中，再从桶中倒入到另一个缸中，性能提高了
