1 事务的基本原理
Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。对于纯JDBC操作数据库，想要用到事务，可以按照一下步骤进行：
    1），获取连接Connection con = DriverManager.getConnection()
    2），开启事务con.setAutoCommit(true/false);
    3），执行CRUD
    4），提交事务/回滚事务con.commit()/con.rollback();
    5），关闭连接conn.close();使用Spring的事务管理功能后，我们可以不再写步骤2和4的代码，而是由Spring自动完成。那么spring是如何在我们CRUD之前和之后开启事务和关闭事务的呢？解决这个问题，也就可以从整体上理解Spring的事务管理实现原理了。下面简单地介绍下，注解方式为例子
       1）配置文件开启注解驱动，在相关的类和方法上通过注解@Transactional标识。
       2）spring在启动的时候回去解析生成相关的bean,这时候会查看拥有相关注解的类和方法，并且为这些类和方法生成代理，并根据@Transaction的相关参数进行相关配置注入，这样就在代理中为我们把相关的事务处理掉了（开启正常提交事务，异常回滚事务）。
       3）真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的。

2 Spring事务的传播属性
所谓spring事务的传播属性，就是定义在存在多个事务同时存在的时候，spring应该如何处理这些事务的行为。这些属性在TransactionDefinition中定义，具体常量的解释见下表：PROPAGATION_REQUIRED 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择，也是spring默认的事务传播。PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，把当前事务挂起。新建的事务将和被挂起的事务没有任何关系，是两个独立的事务，外层事务回滚之后，不能回滚内层事务执行的结果，内层事务失败抛出异常，外层事务捕获，也可以不处理回滚操作 PROPAGATION_SUPPORTS 支持当前事务，如果当前没有事务，就以非事务方式执行。PROPAGATION_MANDATORY 支持档期那事务，如果当前没有事务，就抛出异常 PROPAGATION_NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常。 PROPAGATION_NESTED 如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性执行。它使用了一个单独的事务，这个事务拥有多个可疑回滚的保存点。内部事务的回滚不会对外部事务造成影响。它只对DataSourceTransactionManager事务管理器起效。

3 数据库隔离级别
隔离级别            隔离级别的值     导致的问题
Read-Uncommitted    0                导致脏读
Read-Committed      1                避免脏读，允许不可重复读和幻读
Repeatable-Read     2                避免脏读，不可重复读，允许幻读
Serializable        3                串行化读，事务只能一个一个执行，避免了脏读 不可重复读 幻读。执行效率慢，使用时慎重
脏读：一事务对数据进行了增删改，但未提交，另一事务可以读取到未提交的数据。如果第一个事务这时候回滚了，那么第二个事务就读到了脏数据。
不可重复读：一个事务中发生了两次读操作，第一次读操作和第二次读操作之前，另外一个事务对数据进行了修改，这时候两次读取的数据是不一致的。
幻读：第一个事务对一定范围的数据进行批量修改，第二个事务在这个范围增加一条数据，这时候第一个事务就会丢失对新增范围的修改。
总结：隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。
大多数的数据库默认隔离级别为：Read-Commited,比如sqlServer oracle
少数数据库默认隔离级别为：Repeatable-Read ：Mysql InnoDB

4 Spring中的隔离级别
ISOLATION_DEFAULT 这是个platfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应。
ISOLATION_READ_UNCOMMITTED 这是事务最低的隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读，幻读。
ISOLATION_READ_COMMITTED 保证一个事务修改的数据提交后才能被另一个事务读取。另外一个事务不能读取该事务未提交的数据。
ISOLATION_REPEATABLE_READ 这种事务隔离级别可以防止脏读 不可重复读。但是可能出现幻读
ISOLATION_SERIALIZABLE 事务被处理未顺序执行。